(set-logic HORN)
(define-fun Z_4 () Int 0)
(define-fun S_1 ((x Int)) Int (+ x 1))
(declare-datatypes ((Bool_1 0)) (((false_1) (true_1))))
(declare-fun diseqBool_0 (Bool_1 Bool_1) Bool)
(declare-fun isfalse_0 (Bool_1) Bool)
(declare-fun istrue_0 (Bool_1) Bool)
(assert (isfalse_0 false_1))
(assert (istrue_0 true_1))
(assert (diseqBool_0 false_1 true_1))
(assert (diseqBool_0 true_1 false_1))
(declare-fun and_1 (Bool_1 Bool_1 Bool_1) Bool)
(declare-fun or_1 (Bool_1 Bool_1 Bool_1) Bool)
(declare-fun hence_1 (Bool_1 Bool_1 Bool_1) Bool)
(declare-fun not_1 (Bool_1 Bool_1) Bool)
(assert (and_1 false_1 false_1 false_1))
(assert (and_1 false_1 true_1 false_1))
(assert (and_1 false_1 false_1 true_1))
(assert (and_1 true_1 true_1 true_1))
(assert (or_1 false_1 false_1 false_1))
(assert (or_1 true_1 true_1 false_1))
(assert (or_1 true_1 false_1 true_1))
(assert (or_1 true_1 true_1 true_1))
(assert (hence_1 true_1 false_1 false_1))
(assert (hence_1 false_1 true_1 false_1))
(assert (hence_1 true_1 false_1 true_1))
(assert (hence_1 true_1 true_1 true_1))
(assert (not_1 true_1 false_1))
(assert (not_1 false_1 true_1))
(declare-fun projS_1 (Int Int) Bool)
(declare-fun isZ_1 (Int) Bool)
(declare-fun isS_1 (Int) Bool)
(assert (forall ((x_99 Int))
	(projS_1 x_99 (S_1 x_99))))
(assert (isZ_1 Z_4))
(assert (forall ((x_101 Int))
	(isS_1 (S_1 x_101))))
(declare-datatypes ((list_2 0)) (((nil_2) (cons_2 (head_4 Int) (tail_4 list_2)))))
(declare-fun diseqlist_2 (list_2 list_2) Bool)
(declare-fun head_5 (Int list_2) Bool)
(declare-fun tail_5 (list_2 list_2) Bool)
(declare-fun isnil_2 (list_2) Bool)
(declare-fun iscons_2 (list_2) Bool)
(assert (forall ((x_107 Int) (x_108 list_2))
	(head_5 x_107 (cons_2 x_107 x_108))))
(assert (forall ((x_107 Int) (x_108 list_2))
	(tail_5 x_108 (cons_2 x_107 x_108))))
(assert (isnil_2 nil_2))
(assert (forall ((x_110 Int) (x_111 list_2))
	(iscons_2 (cons_2 x_110 x_111))))
(assert (forall ((x_112 Int) (x_113 list_2))
	(diseqlist_2 nil_2 (cons_2 x_112 x_113))))
(assert (forall ((x_114 Int) (x_115 list_2))
	(diseqlist_2 (cons_2 x_114 x_115) nil_2)))
(assert (forall ((x_116 Int) (x_117 list_2) (x_118 Int) (x_119 list_2))
	(=> (distinct x_116 x_118) (diseqlist_2 (cons_2 x_116 x_117) (cons_2 x_118 x_119)))))
(assert (forall ((x_116 Int) (x_117 list_2) (x_118 Int) (x_119 list_2))
	(=> (diseqlist_2 x_117 x_119) (diseqlist_2 (cons_2 x_116 x_117) (cons_2 x_118 x_119)))))
(declare-fun x_61 (Bool_1 Int Int) Bool)
(assert (forall ((x Int) (y Int))
	(=> (distinct x y) (x_61 false_1 x y))))
(assert (forall ((x Int) (y Int))
	(=> (= x y) (x_61 true_1 x y))))
(declare-fun elem_0 (Bool_1 Int list_2) Bool)
(assert (forall ((z_6 Int) (xs_1 list_2) (x_64 Int))
	(=> (x_61 true_1 x_64 z_6) (elem_0 true_1 x_64 (cons_2 z_6 xs_1)))))
(assert (forall ((x_78 Bool_1) (z_6 Int) (xs_1 list_2) (x_64 Int))
	(=> (and (elem_0 x_78 x_64 xs_1) (x_61 false_1 x_64 z_6)) (elem_0 x_78 x_64 (cons_2 z_6 xs_1)))))
(assert (forall ((x_64 Int))
	(elem_0 false_1 x_64 nil_2)))
(declare-fun x_65 (Bool_1 Int Int) Bool)
(assert (forall ((x Int) (y Int)) (=> (< x y) (x_65 true_1 x y))))
(assert (forall ((x Int) (y Int)) (=> (not (< x y)) (x_65 false_1 x y))))
(declare-fun ins_0 (list_2 Int list_2) Bool)
(assert (forall ((z_8 Int) (xs_2 list_2) (x_68 Int))
	(=> (x_65 true_1 x_68 z_8) (ins_0 (cons_2 x_68 (cons_2 z_8 xs_2)) x_68 (cons_2 z_8 xs_2)))))
(assert (forall ((x_89 list_2) (z_8 Int) (xs_2 list_2) (x_68 Int))
	(=> (and (ins_0 x_89 x_68 xs_2) (x_65 false_1 x_68 z_8)) (ins_0 (cons_2 z_8 x_89) x_68 (cons_2 z_8 xs_2)))))
(assert (forall ((x_68 Int))
	(ins_0 (cons_2 x_68 nil_2) x_68 nil_2)))
(assert (forall ((x_91 list_2) (x_92 Bool_1) (x_93 Bool_1) (x_69 Int) (y_9 Int) (xs_3 list_2))
	(=> (and (diseqBool_0 x_92 x_93) (x_65 true_1 x_69 y_9) (ins_0 x_91 y_9 xs_3) (elem_0 x_92 x_69 x_91) (elem_0 x_93 x_69 xs_3)) false)))
(check-sat)
